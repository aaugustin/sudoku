package sudoku

import "testing"

func TestNewGridFromString(t *testing.T) {
	var tests = []struct {
		input string
		want  Grid
	}{
		// standard grid
		{
			"53__7____\n6__195___\n_98____6_\n8___6___3\n4__8_3__1\n7___2___6\n_6____28_\n___419__5\n____8__79\n",
			Grid{5, 3, 0, 0, 7, 0, 0, 0, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 6, 0, 0, 0, 3, 4, 0, 0, 8, 0, 3, 0, 0, 1, 7, 0, 0, 0, 2, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 0, 0, 0, 8, 0, 0, 7, 9},
		},
		{
			"534678912\n672195348\n198342567\n859761423\n426853791\n713924856\n961537284\n287419635\n345286179\n",
			Grid{5, 3, 4, 6, 7, 8, 9, 1, 2, 6, 7, 2, 1, 9, 5, 3, 4, 8, 1, 9, 8, 3, 4, 2, 5, 6, 7, 8, 5, 9, 7, 6, 1, 4, 2, 3, 4, 2, 6, 8, 5, 3, 7, 9, 1, 7, 1, 3, 9, 2, 4, 8, 5, 6, 9, 6, 1, 5, 3, 7, 2, 8, 4, 2, 8, 7, 4, 1, 9, 6, 3, 5, 3, 4, 5, 2, 8, 6, 1, 7, 9},
		},
		// grid with spaces
		{
			"53  7    \n6  195   \n 98    6 \n8   6   3\n4  8 3  1\n7   2   6\n 6    28 \n   419  5\n    8  79\n",
			Grid{5, 3, 0, 0, 7, 0, 0, 0, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 6, 0, 0, 0, 3, 4, 0, 0, 8, 0, 3, 0, 0, 1, 7, 0, 0, 0, 2, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 0, 0, 0, 8, 0, 0, 7, 9},
		},
		// grid with trailing spaces removed
		{
			"53  7\n6  195\n 98    6\n8   6   3\n4  8 3  1\n7   2   6\n 6    28\n   419  5\n    8  79\n",
			Grid{5, 3, 0, 0, 7, 0, 0, 0, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 6, 0, 0, 0, 3, 4, 0, 0, 8, 0, 3, 0, 0, 1, 7, 0, 0, 0, 2, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 0, 0, 0, 8, 0, 0, 7, 9},
		},
		// grid without trailing newline
		{
			"53__7____\n6__195___\n_98____6_\n8___6___3\n4__8_3__1\n7___2___6\n_6____28_\n___419__5\n____8__79",
			Grid{5, 3, 0, 0, 7, 0, 0, 0, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 6, 0, 0, 0, 3, 4, 0, 0, 8, 0, 3, 0, 0, 1, 7, 0, 0, 0, 2, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 0, 0, 0, 8, 0, 0, 7, 9},
		},
		// grid with CR-LF line endings
		{
			"53  7    \r\n6  195   \r\n 98    6 \r\n8   6   3\r\n4  8 3  1\r\n7   2   6\r\n 6    28 \r\n   419  5\r\n    8  79\r\n",
			Grid{5, 3, 0, 0, 7, 0, 0, 0, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 6, 0, 0, 0, 3, 4, 0, 0, 8, 0, 3, 0, 0, 1, 7, 0, 0, 0, 2, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 0, 0, 0, 8, 0, 0, 7, 9},
		},
		// grid CR line endings
		{
			"534678912\r672195348\r198342567\r859761423\r426853791\r713924856\r961537284\r287419635\r345286179\r",
			Grid{5, 3, 4, 6, 7, 8, 9, 1, 2, 6, 7, 2, 1, 9, 5, 3, 4, 8, 1, 9, 8, 3, 4, 2, 5, 6, 7, 8, 5, 9, 7, 6, 1, 4, 2, 3, 4, 2, 6, 8, 5, 3, 7, 9, 1, 7, 1, 3, 9, 2, 4, 8, 5, 6, 9, 6, 1, 5, 3, 7, 2, 8, 4, 2, 8, 7, 4, 1, 9, 6, 3, 5, 3, 4, 5, 2, 8, 6, 1, 7, 9},
		},
		// standard line
		{
			"____8__79___419__5_6____28_7___2___64__8_3__18___6___3_98____6_6__195___53__7____",
			Grid{0, 0, 0, 0, 8, 0, 0, 7, 9, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 6, 0, 0, 0, 0, 2, 8, 0, 7, 0, 0, 0, 2, 0, 0, 0, 6, 4, 0, 0, 8, 0, 3, 0, 0, 1, 8, 0, 0, 0, 6, 0, 0, 0, 3, 0, 9, 8, 0, 0, 0, 0, 6, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 5, 3, 0, 0, 7, 0, 0, 0, 0},
		},
		{
			"345286179287419635961537284713924856426853791859761423198342567672195348534678912",
			Grid{3, 4, 5, 2, 8, 6, 1, 7, 9, 2, 8, 7, 4, 1, 9, 6, 3, 5, 9, 6, 1, 5, 3, 7, 2, 8, 4, 7, 1, 3, 9, 2, 4, 8, 5, 6, 4, 2, 6, 8, 5, 3, 7, 9, 1, 8, 5, 9, 7, 6, 1, 4, 2, 3, 1, 9, 8, 3, 4, 2, 5, 6, 7, 6, 7, 2, 1, 9, 5, 3, 4, 8, 5, 3, 4, 6, 7, 8, 9, 1, 2},
		},
		// line with dots
		{
			"....8..79...419..5.6....28.7...2...64..8.3..18...6...3.98....6.6..195...53..7....",
			Grid{0, 0, 0, 0, 8, 0, 0, 7, 9, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 6, 0, 0, 0, 0, 2, 8, 0, 7, 0, 0, 0, 2, 0, 0, 0, 6, 4, 0, 0, 8, 0, 3, 0, 0, 1, 8, 0, 0, 0, 6, 0, 0, 0, 3, 0, 9, 8, 0, 0, 0, 0, 6, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 5, 3, 0, 0, 7, 0, 0, 0, 0},
		},
		// line with spaces
		{
			"    8  79   419  5 6    28 7   2   64  8 3  18   6   3 98    6 6  195   53  7    ",
			Grid{0, 0, 0, 0, 8, 0, 0, 7, 9, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 6, 0, 0, 0, 0, 2, 8, 0, 7, 0, 0, 0, 2, 0, 0, 0, 6, 4, 0, 0, 8, 0, 3, 0, 0, 1, 8, 0, 0, 0, 6, 0, 0, 0, 3, 0, 9, 8, 0, 0, 0, 0, 6, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 5, 3, 0, 0, 7, 0, 0, 0, 0},
		},
		// line with trailing spaces removed
		{
			"    8  79   419  5 6    28 7   2   64  8 3  18   6   3 98    6 6  195   53  7",
			Grid{0, 0, 0, 0, 8, 0, 0, 7, 9, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 6, 0, 0, 0, 0, 2, 8, 0, 7, 0, 0, 0, 2, 0, 0, 0, 6, 4, 0, 0, 8, 0, 3, 0, 0, 1, 8, 0, 0, 0, 6, 0, 0, 0, 3, 0, 9, 8, 0, 0, 0, 0, 6, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 5, 3, 0, 0, 7, 0, 0, 0, 0},
		},
		// line with trailing newline
		{
			"345286179287419635961537284713924856426853791859761423198342567672195348534678912\n",
			Grid{3, 4, 5, 2, 8, 6, 1, 7, 9, 2, 8, 7, 4, 1, 9, 6, 3, 5, 9, 6, 1, 5, 3, 7, 2, 8, 4, 7, 1, 3, 9, 2, 4, 8, 5, 6, 4, 2, 6, 8, 5, 3, 7, 9, 1, 8, 5, 9, 7, 6, 1, 4, 2, 3, 1, 9, 8, 3, 4, 2, 5, 6, 7, 6, 7, 2, 1, 9, 5, 3, 4, 8, 5, 3, 4, 6, 7, 8, 9, 1, 2},
		},
	}

	for _, test := range tests {
		grid, err := NewGridFromString(test.input)
		if err != nil {
			t.Errorf("%q: got error: %s", test.input, err)
		}
		if grid != test.want {
			t.Errorf("%q: got %v, want %v", test.input, grid, test.want)
		}
	}
}

func TestNewGridFromStringError(t *testing.T) {
	var tests = []struct {
		input string
		want  string
	}{
		// grid with 10 columns
		{
			"53  7    5\n6  195   6\n 98    6  \n8   6   38\n4  8 3  14\n7   2   67\n 6    28  \n   419  5 \n    8  79 \n",
			"input isn't a 9x9 grid: \"53  7    5\\n6  195   6\\n 98    6  \\n8   6   38\\n4  8 3  14\\n7   2   67\\n 6    28  \\n   419  5 \\n    8  79 \\n\"",
		},
		// grid with 10 rows
		{
			"53  7    \n6  195   \n 98    6 \n8   6   3\n4  8 3  1\n7   2   6\n 6    28 \n   419  5\n    8  79\n53  7    \n",
			"input isn't a 9x9 grid: \"53  7    \\n6  195   \\n 98    6 \\n8   6   3\\n4  8 3  1\\n7   2   6\\n 6    28 \\n   419  5\\n    8  79\\n53  7    \\n\"",
		},
		// grid with 8 rows
		{
			"53  7    \n6  195   \n 98    6 \n8   6   3\n4  8 3  1\n7   2   6\n 6    28 \n   419  5\n",
			"input isn't a 9x9 grid: \"53  7    \\n6  195   \\n 98    6 \\n8   6   3\\n4  8 3  1\\n7   2   6\\n 6    28 \\n   419  5\\n\"",
		},
		// line with 82 characters
		{
			"    8  79   419  5 6    28 7   2   64  8 3  18   6   3 98    6 6  195   53  7     ",
			"input isn't a 9x9 grid: \"    8  79   419  5 6    28 7   2   64  8 3  18   6   3 98    6 6  195   53  7     \"",
		},
		// grid with extra trailing newline
		{
			"53__7____\n6__195___\n_98____6_\n8___6___3\n4__8_3__1\n7___2___6\n_6____28_\n___419__5\n____8__79\n\n",
			"input isn't a 9x9 grid: \"53__7____\\n6__195___\\n_98____6_\\n8___6___3\\n4__8_3__1\\n7___2___6\\n_6____28_\\n___419__5\\n____8__79\\n\\n\"",
		},
		// non numeric input
		{
			"53__7____\n6__A95___\n_98____6_\n8___6___3\n4__8_3__A\n7___2___6\n_6____28_\n___4A9__5\n____8__79\n",
			"cell contains invalid value: 'A'",
		},
	}

	for _, test := range tests {
		_, err := NewGridFromString(test.input)
		if err == nil {
			t.Errorf("%q: want error: %s", test.input, test.want)
		} else if err.Error() != test.want {
			t.Errorf("%q: got %v, want %v", test.input, err, test.want)
		}
	}
}

func TestToString(t *testing.T) {
	var tests = []struct {
		grid   Grid
		format string
		want   string
	}{
		{
			Grid{5, 3, 0, 0, 7, 0, 0, 0, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 6, 0, 0, 0, 3, 4, 0, 0, 8, 0, 3, 0, 0, 1, 7, 0, 0, 0, 2, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 0, 0, 0, 8, 0, 0, 7, 9},
			"console",
			" --- --- --- --- --- --- --- --- --- \n| 5 | 3 |   |   | 7 |   |   |   |   |\n --- --- --- --- --- --- --- --- --- \n| 6 |   |   | 1 | 9 | 5 |   |   |   |\n --- --- --- --- --- --- --- --- --- \n|   | 9 | 8 |   |   |   |   | 6 |   |\n --- --- --- --- --- --- --- --- --- \n| 8 |   |   |   | 6 |   |   |   | 3 |\n --- --- --- --- --- --- --- --- --- \n| 4 |   |   | 8 |   | 3 |   |   | 1 |\n --- --- --- --- --- --- --- --- --- \n| 7 |   |   |   | 2 |   |   |   | 6 |\n --- --- --- --- --- --- --- --- --- \n|   | 6 |   |   |   |   | 2 | 8 |   |\n --- --- --- --- --- --- --- --- --- \n|   |   |   | 4 | 1 | 9 |   |   | 5 |\n --- --- --- --- --- --- --- --- --- \n|   |   |   |   | 8 |   |   | 7 | 9 |\n --- --- --- --- --- --- --- --- --- \n",
		},
		{
			Grid{3, 4, 5, 2, 8, 6, 1, 7, 9, 2, 8, 7, 4, 1, 9, 6, 3, 5, 9, 6, 1, 5, 3, 7, 2, 8, 4, 7, 1, 3, 9, 2, 4, 8, 5, 6, 4, 2, 6, 8, 5, 3, 7, 9, 1, 8, 5, 9, 7, 6, 1, 4, 2, 3, 1, 9, 8, 3, 4, 2, 5, 6, 7, 6, 7, 2, 1, 9, 5, 3, 4, 8, 5, 3, 4, 6, 7, 8, 9, 1, 2},
			"console",
			" --- --- --- --- --- --- --- --- --- \n| 3 | 4 | 5 | 2 | 8 | 6 | 1 | 7 | 9 |\n --- --- --- --- --- --- --- --- --- \n| 2 | 8 | 7 | 4 | 1 | 9 | 6 | 3 | 5 |\n --- --- --- --- --- --- --- --- --- \n| 9 | 6 | 1 | 5 | 3 | 7 | 2 | 8 | 4 |\n --- --- --- --- --- --- --- --- --- \n| 7 | 1 | 3 | 9 | 2 | 4 | 8 | 5 | 6 |\n --- --- --- --- --- --- --- --- --- \n| 4 | 2 | 6 | 8 | 5 | 3 | 7 | 9 | 1 |\n --- --- --- --- --- --- --- --- --- \n| 8 | 5 | 9 | 7 | 6 | 1 | 4 | 2 | 3 |\n --- --- --- --- --- --- --- --- --- \n| 1 | 9 | 8 | 3 | 4 | 2 | 5 | 6 | 7 |\n --- --- --- --- --- --- --- --- --- \n| 6 | 7 | 2 | 1 | 9 | 5 | 3 | 4 | 8 |\n --- --- --- --- --- --- --- --- --- \n| 5 | 3 | 4 | 6 | 7 | 8 | 9 | 1 | 2 |\n --- --- --- --- --- --- --- --- --- \n",
		},
		{
			Grid{5, 3, 0, 0, 7, 0, 0, 0, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 6, 0, 0, 0, 3, 4, 0, 0, 8, 0, 3, 0, 0, 1, 7, 0, 0, 0, 2, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 0, 0, 0, 8, 0, 0, 7, 9},
			"grid",
			"53__7____\n6__195___\n_98____6_\n8___6___3\n4__8_3__1\n7___2___6\n_6____28_\n___419__5\n____8__79\n",
		},
		{
			Grid{3, 4, 5, 2, 8, 6, 1, 7, 9, 2, 8, 7, 4, 1, 9, 6, 3, 5, 9, 6, 1, 5, 3, 7, 2, 8, 4, 7, 1, 3, 9, 2, 4, 8, 5, 6, 4, 2, 6, 8, 5, 3, 7, 9, 1, 8, 5, 9, 7, 6, 1, 4, 2, 3, 1, 9, 8, 3, 4, 2, 5, 6, 7, 6, 7, 2, 1, 9, 5, 3, 4, 8, 5, 3, 4, 6, 7, 8, 9, 1, 2},
			"grid",
			"345286179\n287419635\n961537284\n713924856\n426853791\n859761423\n198342567\n672195348\n534678912\n",
		},
		{
			Grid{5, 3, 0, 0, 7, 0, 0, 0, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 6, 0, 0, 0, 3, 4, 0, 0, 8, 0, 3, 0, 0, 1, 7, 0, 0, 0, 2, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 0, 0, 0, 8, 0, 0, 7, 9},
			"line",
			"53__7____6__195____98____6_8___6___34__8_3__17___2___6_6____28____419__5____8__79",
		},
		{
			Grid{3, 4, 5, 2, 8, 6, 1, 7, 9, 2, 8, 7, 4, 1, 9, 6, 3, 5, 9, 6, 1, 5, 3, 7, 2, 8, 4, 7, 1, 3, 9, 2, 4, 8, 5, 6, 4, 2, 6, 8, 5, 3, 7, 9, 1, 8, 5, 9, 7, 6, 1, 4, 2, 3, 1, 9, 8, 3, 4, 2, 5, 6, 7, 6, 7, 2, 1, 9, 5, 3, 4, 8, 5, 3, 4, 6, 7, 8, 9, 1, 2},
			"line",
			"345286179287419635961537284713924856426853791859761423198342567672195348534678912",
		},
		{
			Grid{5, 3, 0, 0, 7, 0, 0, 0, 0, 6, 0, 0, 1, 9, 5, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 6, 0, 0, 0, 3, 4, 0, 0, 8, 0, 3, 0, 0, 1, 7, 0, 0, 0, 2, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 4, 1, 9, 0, 0, 5, 0, 0, 0, 0, 8, 0, 0, 7, 9},
			"html",
			"<table><tr><td>5</td><td>3</td><td></td><td></td><td>7</td><td></td><td></td><td></td><td></td></tr><tr><td>6</td><td></td><td></td><td>1</td><td>9</td><td>5</td><td></td><td></td><td></td></tr><tr><td></td><td>9</td><td>8</td><td></td><td></td><td></td><td></td><td>6</td><td></td></tr><tr><td>8</td><td></td><td></td><td></td><td>6</td><td></td><td></td><td></td><td>3</td></tr><tr><td>4</td><td></td><td></td><td>8</td><td></td><td>3</td><td></td><td></td><td>1</td></tr><tr><td>7</td><td></td><td></td><td></td><td>2</td><td></td><td></td><td></td><td>6</td></tr><tr><td></td><td>6</td><td></td><td></td><td></td><td></td><td>2</td><td>8</td><td></td></tr><tr><td></td><td></td><td></td><td>4</td><td>1</td><td>9</td><td></td><td></td><td>5</td></tr><tr><td></td><td></td><td></td><td></td><td>8</td><td></td><td></td><td>7</td><td>9</td></tr></table>",
		},
		{
			Grid{3, 4, 5, 2, 8, 6, 1, 7, 9, 2, 8, 7, 4, 1, 9, 6, 3, 5, 9, 6, 1, 5, 3, 7, 2, 8, 4, 7, 1, 3, 9, 2, 4, 8, 5, 6, 4, 2, 6, 8, 5, 3, 7, 9, 1, 8, 5, 9, 7, 6, 1, 4, 2, 3, 1, 9, 8, 3, 4, 2, 5, 6, 7, 6, 7, 2, 1, 9, 5, 3, 4, 8, 5, 3, 4, 6, 7, 8, 9, 1, 2},
			"html",
			"<table><tr><td>3</td><td>4</td><td>5</td><td>2</td><td>8</td><td>6</td><td>1</td><td>7</td><td>9</td></tr><tr><td>2</td><td>8</td><td>7</td><td>4</td><td>1</td><td>9</td><td>6</td><td>3</td><td>5</td></tr><tr><td>9</td><td>6</td><td>1</td><td>5</td><td>3</td><td>7</td><td>2</td><td>8</td><td>4</td></tr><tr><td>7</td><td>1</td><td>3</td><td>9</td><td>2</td><td>4</td><td>8</td><td>5</td><td>6</td></tr><tr><td>4</td><td>2</td><td>6</td><td>8</td><td>5</td><td>3</td><td>7</td><td>9</td><td>1</td></tr><tr><td>8</td><td>5</td><td>9</td><td>7</td><td>6</td><td>1</td><td>4</td><td>2</td><td>3</td></tr><tr><td>1</td><td>9</td><td>8</td><td>3</td><td>4</td><td>2</td><td>5</td><td>6</td><td>7</td></tr><tr><td>6</td><td>7</td><td>2</td><td>1</td><td>9</td><td>5</td><td>3</td><td>4</td><td>8</td></tr><tr><td>5</td><td>3</td><td>4</td><td>6</td><td>7</td><td>8</td><td>9</td><td>1</td><td>2</td></tr></table>",
		},
	}

	for _, test := range tests {
		output, err := test.grid.ToString(test.format)
		if err != nil {
			t.Errorf("%v: %s: got error: %s", test.grid, test.format, err)
		}
		if output != test.want {
			t.Errorf("%v: %s: got %q, want %q", test.grid, test.format, output, test.want)
		}
	}
}

func TestToStringError(t *testing.T) {
	var grid Grid
	_, err := grid.ToString("3d")
	if err == nil || err.Error() != "unsupported format: 3d" {
		t.Error("want error: unsupported format: 3d")
	}
}
